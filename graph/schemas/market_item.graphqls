type MarketItemPrice {
    price: Float!
    quantity: Int!
}

type MarketItemTransaction {
    createdAt: Time!
    price: Float!
}

type MarketItem {
    id: ID!
    buyPrices: [MarketItemPrice!]!
    category: String!
    description: String!
    game: Game!
    image: AssetFile!
    name: String!
    pastMonthSales: [MarketItemTransaction!]!
    salePrices: [MarketItemPrice!]!
    startingPrice: Float!
    transactionsCount: Int!
}

type MarketItemOffer {
    id: ID!
    marketItem: MarketItem!
    price: Float!
    quantity: Int!
}

type MarketItemPagination {
    data: [MarketItem!]!
    totalPages: Int!
}

extend type User {
    gamesByOwnedMarketItems: [Game!]!
    marketItemsBuyListing: [MarketItemOffer!]!
    marketItemsByGame(page: Int!, gameId: ID!, filter: String!): MarketItemPagination!
    marketItemsSellListing: [MarketItemOffer!]!
}

extend type Query {
    marketItem(id: ID!): MarketItem!
    marketItems(page: Int!): MarketItemPagination!
}

input AddMarketItemOffer {
    category: String!
    marketItemId: ID!
    price: Float!
    quantity: Int!
}

extend type Mutation {
    addMarketItemOffer(input: AddMarketItemOffer!): MarketItemOffer!
    cancelMarketItemOffer(id: ID!): MarketItemOffer!
}

extend type Subscription {
    onMarketItemOfferAdded(marketItemId: ID!): String!
}
