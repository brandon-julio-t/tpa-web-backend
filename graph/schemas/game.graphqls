type Game {
    id: ID!
    banner: AssetFile!
    createdAt: Time!
    description: String!
    developer: String!
    discount: Float!
    genre: GameGenre!
    isInappropriate: Boolean!
    isInCart: Boolean!
    isInWishlist: Boolean!
    price: Float!
    publisher: String!
    slideshows: [GameSlideshow!]!
    systemRequirements: String!
    tags: [GameTag!]!
    title: String!
}

type GameSlideshow {
    game: Game!
    file: AssetFile!
}

type GamePagination {
    data: [Game!]!
    totalPages: Int!
}

type GameGenre {
    id: ID!
    name: String!
}

extend type User {
    games: [Game!]!
}

extend type Query {
    communityRecommended: [Game!]!
    featuredAndRecommendedGames: [Game!]!
    games(page: Int!): GamePagination!
    genres: [GameGenre!]!
    getGameById(id: ID!): Game!
    newAndTrending: [Game!]!
    searchGames(page: Int!, keyword: String!, price: Int!, genres: [ID!]!, category: String!): GamePagination!
    specialOffersGame: [Game!]!
    specials: [Game!]!
    topSellers: [Game!]!
}

extend type Mutation {
    createGame(input: CreateGame!): Game!
    updateGame(input: UpdateGame!): Game!
    deleteGame(id: ID!): Game!
}

input CreateGame {
    title: String!
    description: String!
    price: Float!
    banner: Upload!
    slideshows: [Upload!]!
    gameTags: [ID!]!
    genreId: ID!
    isInappropriate: Boolean!
    systemRequirements: String!
}

input UpdateGame {
    id: ID!
    title: String!
    description: String!
    price: Float!
    banner: Upload
    slideshows: [Upload]
    gameTags: [ID!]!
    genreId: ID!
    isInappropriate: Boolean!
    systemRequirements: String!
}
