scalar Upload
scalar Time

type User {
    id: ID!
    accountName: String!
    country: Country!
    customUrl: String!
    displayName: String!
    email: String!
    profilePicture: AssetFile!
    profileTheme: String!
    realName: String!
    summary: String!
    walletBalance: Float!
    suspendedAt: Time
    reportCounts: Int!
}

type UserPagination {
    data: [User!]!
    totalPages: Int!
}

extend type Query {
    getProfile(customUrl: String!): User!
    users(page: Int!): UserPagination!
}

extend type Mutation {
    register(accountName: String!, email: String!, password: String!, countryId: ID!): User!
    updateProfile(input: UpdateUser): User!
    suspendAccount(id: ID!): User!
}

input UpdateUser {
    displayName: String!
    realName: String!
    customUrl: String!
    summary: String!
    countryId: ID!
    avatar: Upload
    profileTheme: String!
}
